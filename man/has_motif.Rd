% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/has-motif.R
\name{has_motif}
\alias{has_motif}
\title{Check if a Glycan has the Given Motif}
\usage{
has_motif(
  glycan,
  motif,
  ...,
  alignment = "substructure",
  ignore_linkages = FALSE
)
}
\arguments{
\item{glycan}{A 'glycan_graph' object.}

\item{motif}{A 'glycan_graph' object.}

\item{...}{Not used.}

\item{alignment}{A character string. Possible values are "substructure", "core", "terminal" and "whole".
See description for details. Default is "substructure".}

\item{ignore_linkages}{A logical value. If \code{TRUE}, linkages will be ignored in the comparison.}
}
\value{
A logical value indicating if the \code{glycan} has the \code{motif}.
}
\description{
This function checks if a \code{glycan} has a given \code{motif}.
Technically speaking, it performs a subgraph isomorphism test to
determine if the \code{motif} is a subgraph of the \code{glycan}.
Both monosaccharides and linkages are considered in the comparison by default.
If \code{ignore_linkages} is set to \code{TRUE}, linkages will be ignored in the comparison.

Both \code{glycan} and \code{motif} should be 'glycan_graph' objects
(see \code{\link[glyrepr:as_glycan_graph]{glyrepr::as_glycan_graph()}}).
They can be either "NE" or "DN" glycan graphs (can be different).

Also, they can have different monosaccharide types
("concrete", "generic" or "simple", see \code{\link[glyrepr:decide_mono_type]{glyrepr::decide_mono_type()}}).
However, the monosaccharide type of \code{glycan} cannot be obscurer than that of \code{motif},
which will raise an error.
For example, a "concrete" \code{glycan} can have a "generic" \code{motif}, but not vice versa.

Obscure linkages (e.g. "??-?") are allowed in the \code{motif} graph
(see \code{\link[glyrepr:possible_linkages]{glyrepr::possible_linkages()}}).
"?" in a motif graph means "anything could be OK",
so it will match any linkage in the \code{glycan} graph.
However, "?" in a \code{glycan} graph will only match "?" in the \code{motif} graph.

According to the \href{https://glycomotif.glyomics.org}{GlycoMotif} database,
a motif can be classified into four alignment types:
\itemize{
\item "substructure": The motif can be anywhere in the glycan. This is the default.
See \href{https://glycomotif.glyomics.org/glycomotif/Substructure_Alignment}{substructure}
for details.
\item "core": The motif must align with at least one connected substructure
(subtree) at the reducing end of the glycan.
See \href{https://glycomotif.glyomics.org/glycomotif/Glycan_Core_Alignment}{glycan core}
for details.
\item "terminal": The motif must align with at least one connected substructure
(subtree) at the nonreducing end of the glycan.
See \href{https://glycomotif.glyomics.org/glycomotif/Nonreducing-End_Alignment}{nonreducing end}
for details.
\item "whole": The motif must align with the entire glycan.
See \href{https://glycomotif.glyomics.org/glycomotif/Whole-Glycan_Alignment}{whole-glycan}
for details.
}

Please see the Examples section if you are confused.
And also see the documentation of key functions listed above.
}
\details{
Under the hood, if \code{alignment} is "whole", the function uses
\code{\link[igraph:isomorphic]{igraph::isomorphic()}} with "vf2" method to perform the isomorphism test.
Otherwise, it uses \code{\link[igraph:subgraph_isomorphisms]{igraph::graph.get.subisomorphisms.vf2()}} to get all possible
subgraph isomorphisms between the \code{glycan} and \code{motif} graphs.
Vextex attributes and edge attributes of the \code{glycan} and \code{motif} graphs are colorized
to add "color" attributes to the vertices and edges of the graphs.

To allow obscure linkage matching, \code{\link[glyrepr:possible_linkages]{glyrepr::possible_linkages()}} is used to
generate all possible versions of the \code{motif} graph.
Then, the subgraph isomorphism test is performed for each version,
returning \code{TRUE} if any of them is isomorphic to the \code{glycan} graph.
This implementation could suffer from performance issues when the \code{motif} graph
has many obscure linkages.
However, it is the most straightforward way to handle obscure linkages.
Future improvements may fine-tune the "vf2" method or use other methods
to support wildcard matching directly.
}
\examples{
library(glyparse)
library(glyrepr)

(glycan <- glyrepr::o_glycan_core_2(mode = "ne", mono_type = "concrete"))

# The glycan has the motif "Gal(b1-3)GalNAc"
motif_1 <- parse_iupac_condensed("Gal(b1-3)GalNAc")
has_motif(glycan, motif_1)

# But not "Gal(b1-4)GalNAc" (wrong linkage)
motif_2 <- parse_iupac_condensed("Gal(b1-4)GalNAc")
has_motif(glycan, motif_2)

# Set `ignore_linkages` to `TRUE` to ignore linkages
has_motif(glycan, motif_2, ignore_linkages = TRUE)

# Glycan and motif can have different graph modes
motif_1_dn <- convert_graph_mode(motif_1, to = "dn")
has_motif(glycan, motif_1_dn)

# And different monosaccharide types
motif_1_generic <- convert_glycan_mono_type(motif_1, "generic")
has_motif(glycan, motif_1_generic)

# However, the monosaccharide type of `glycan` cannot be obscurer than that of `motif`
glycan_simple <- convert_glycan_mono_type(glycan, "simple")
try(has_motif(glycan_simple, motif_1))

# Obscure linkages in the `motif` graph are allowed
motif_3 <- parse_iupac_condensed("Gal(b1-?)GalNAc")
has_motif(glycan, motif_3)

# However, obscure linkages in `glycan` will only match "?" in the `motif` graph
glycan_2 <- parse_iupac_condensed("Gal(b1-?)[GlcNAc(b1-6)]GalNAc")
has_motif(glycan_2, motif_1)
has_motif(glycan_2, motif_3)

# Alignment types
glycan_3 <- parse_iupac_condensed("Gal(a1-3)Gal(a1-4)Gal(a1-6)Gal")
motif_4 <-  parse_iupac_condensed("Gal(a1-3)Gal(a1-4)Gal(a1-6)Gal")
motif_5 <-  parse_iupac_condensed("Gal(a1-3)Gal(a1-4)Gal")
motif_6 <-  parse_iupac_condensed(         "Gal(a1-4)Gal(a1-6)Gal")
motif_7 <-  parse_iupac_condensed(         "Gal(a1-4)Gal")
motifs <- list(motif_4, motif_5, motif_6, motif_7)

purrr::map_lgl(motifs, ~ has_motif(glycan_3, .x, alignment = "whole"))
purrr::map_lgl(motifs, ~ has_motif(glycan_3, .x, alignment = "core"))
purrr::map_lgl(motifs, ~ has_motif(glycan_3, .x, alignment = "terminal"))
purrr::map_lgl(motifs, ~ has_motif(glycan_3, .x, alignment = "substructure"))

}
